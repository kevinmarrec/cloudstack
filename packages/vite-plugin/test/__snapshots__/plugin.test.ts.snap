// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`plugin > 'without pwa' 1`] = `
[
  "vite-tsconfig-paths",
  "cloudstack:config",
  "cloudstack:dark-mode",
  "cloudstack:virtual",
  "vite:vue",
  "vite:transform-yaml",
]
`;

exports[`plugin > should inject dark mode script in index.html 1`] = `
"<html>
<script>(function () {
  const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
  const setting = localStorage.getItem('vueuse-color-scheme') || 'auto'
  if (setting === 'dark' || (prefersDark && setting !== 'light'))
    document.documentElement.classList.toggle('dark', true)
})()</script>

<script type="module" src="/@id/virtual:vue-devtools-path:overlay.js"></script>
<script type="module" src="/@id/virtual:vue-inspector-path:load.js"></script>

<script type="module" src="/@vite/client"></script>
</html>"
`;

exports[`plugin > should optimize dependencies 1`] = `
[
  "@kevinmarrec/cloudstack-vue-i18n",
  "vite-ssg",
  "vite-ssg/single-page",
  "vue",
  "workbox-window",
]
`;

exports[`plugin > with all integrations (mode: 'development') 1`] = `
[
  "vite-plugin-pwa",
  "vite-tsconfig-paths",
  "unocss:transformers:pre",
  "unocss:global:content",
  "unocss:global",
  "unplugin-vue-router",
  "vite-plugin-inspect",
  "vite-plugin-vue-devtools",
  "cloudstack:config",
  "cloudstack:dark-mode",
  "cloudstack:virtual",
  "vite-plugin-pwa:dev-sw",
  "unocss:config",
  "unocss:transformers:undefined",
  "unocss:devtools",
  "unocss:api",
  "unocss:inspector",
  "vite:vue",
  "vite:transform-yaml",
  "vite-plugin-pwa:info",
  "vite-plugin-pwa:pwa-assets",
  "unocss:transformers:post",
  "unocss:global:post",
]
`;

exports[`plugin > with all integrations (mode: 'production') 1`] = `
[
  "vite-plugin-pwa",
  "vite-tsconfig-paths",
  "unocss:transformers:pre",
  "unocss:global:build:scan",
  "unocss:global:content",
  "unplugin-vue-router",
  "cloudstack:config",
  "cloudstack:dark-mode",
  "cloudstack:virtual",
  "unocss:config",
  "unocss:transformers:undefined",
  "unocss:devtools",
  "unocss:api",
  "unocss:global:build:generate",
  "vite:vue",
  "vite:transform-yaml",
  "vite-plugin-pwa:info",
  "vite-plugin-pwa:build",
  "vite-plugin-pwa:pwa-assets",
  "unocss:transformers:post",
  "unocss:global:build:bundle",
]
`;

exports[`plugin > with defaults (mode: 'analyze') 1`] = `
[
  "vite-plugin-pwa",
  "vite-tsconfig-paths",
  "cloudstack:config",
  "cloudstack:dark-mode",
  "cloudstack:virtual",
  "visualizer",
  "vite:vue",
  "vite:transform-yaml",
  "vite-plugin-pwa:info",
  "vite-plugin-pwa:build",
  "vite-plugin-pwa:pwa-assets",
]
`;

exports[`plugin > with defaults (mode: 'development') 1`] = `
[
  "vite-plugin-pwa",
  "vite-tsconfig-paths",
  "vite-plugin-inspect",
  "vite-plugin-vue-devtools",
  "cloudstack:config",
  "cloudstack:dark-mode",
  "cloudstack:virtual",
  "vite-plugin-pwa:dev-sw",
  "vite:vue",
  "vite:transform-yaml",
  "vite-plugin-pwa:info",
  "vite-plugin-pwa:pwa-assets",
]
`;

exports[`plugin > with defaults (mode: 'production') 1`] = `
[
  "vite-plugin-pwa",
  "vite-tsconfig-paths",
  "cloudstack:config",
  "cloudstack:dark-mode",
  "cloudstack:virtual",
  "vite:vue",
  "vite:transform-yaml",
  "vite-plugin-pwa:info",
  "vite-plugin-pwa:build",
  "vite-plugin-pwa:pwa-assets",
]
`;

exports[`plugin > without pwa 1`] = `
[
  "vite-tsconfig-paths",
  "cloudstack:config",
  "cloudstack:dark-mode",
  "cloudstack:virtual",
  "vite:vue",
  "vite:transform-yaml",
]
`;

exports[`virtual module > should generate virtual module content (with router, i18n & unocss) 1`] = `
"import { ViteSSG } from 'vite-ssg'
import { routes } from 'vue-router/auto-routes'
import { createI18n } from '@kevinmarrec/cloudstack-vue-i18n'
import { usePWA } from '@kevinmarrec/cloudstack-vue-pwa'
import 'the-new-css-reset'
import 'uno.css'
const fn = (innerFn) => async (ctx) => {
  ctx.app.use(await createI18n({
    messages: import.meta.glob('/src/locales/*.{json,yaml,yml}')
  }))
  usePWA().register()
  innerFn?.(ctx)
}
export const Cloudstack = (App, argA, argB) =>
  typeof argA === 'object'
    ? ViteSSG(App, { routes, ...argA }, fn(argB))
    : ViteSSG(App, { routes }, fn(argA))
"
`;

exports[`virtual module > should generate virtual module content (with router, i18n & unocss) 2`] = `
"import { ViteSSG } from 'vite-ssg'
import { routes } from 'vue-router/auto-routes'
import { createI18n } from '@kevinmarrec/cloudstack-vue-i18n'
import { usePWA } from '@kevinmarrec/cloudstack-vue-pwa'
import 'the-new-css-reset'
import 'uno.css'
const fn = (innerFn) => async (ctx) => {
  ctx.app.use(await createI18n({
    locale: 'fr',
    fallbackLocale: 'en',
    messages: import.meta.glob('/src/locales/*.{json,yaml,yml}')
  }))
  usePWA().register()
  innerFn?.(ctx)
}
export const Cloudstack = (App, argA, argB) =>
  typeof argA === 'object'
    ? ViteSSG(App, { routes, ...argA }, fn(argB))
    : ViteSSG(App, { routes }, fn(argA))
"
`;

exports[`virtual module > should generate virtual module content, (SPA) 1`] = `
"import { ViteSSG } from 'vite-ssg/single-page'
import { usePWA } from '@kevinmarrec/cloudstack-vue-pwa'
import 'the-new-css-reset'
const fn = (innerFn) => async (ctx) => {
  usePWA().register()
  innerFn?.(ctx)
}
export const Cloudstack = (App, argA, argB) =>
  typeof argA === 'object'
    ? ViteSSG(App, fn(argB))
    : ViteSSG(App, fn(argA))
"
`;
